ssParser = (function(){
  /* Generated by PEG.js (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_statement(context) {
        var cacheKey = "statement" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        var result96 = parse_ws(context);
        if (result96 !== null) {
          var result97 = parse_member(context);
          if (result97 !== null) {
            var result98 = parse_ws(context);
            if (result98 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result99 = "=";
                pos += 1;
              } else {
                var result99 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("="));
                }
              }
              if (result99 !== null) {
                var result100 = parse_ws(context);
                if (result100 !== null) {
                  var result101 = parse_logical(context);
                  if (result101 !== null) {
                    var result102 = parse_ws(context);
                    if (result102 !== null) {
                      if (input.substr(pos, 1) === ";") {
                        var result103 = ";";
                        pos += 1;
                      } else {
                        var result103 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(";"));
                        }
                      }
                      if (result103 !== null) {
                        var result104 = parse_ws(context);
                        if (result104 !== null) {
                          var result95 = [result96, result97, result98, result99, result100, result101, result102, result103, result104];
                        } else {
                          var result95 = null;
                          pos = savedPos8;
                        }
                      } else {
                        var result95 = null;
                        pos = savedPos8;
                      }
                    } else {
                      var result95 = null;
                      pos = savedPos8;
                    }
                  } else {
                    var result95 = null;
                    pos = savedPos8;
                  }
                } else {
                  var result95 = null;
                  pos = savedPos8;
                }
              } else {
                var result95 = null;
                pos = savedPos8;
              }
            } else {
              var result95 = null;
              pos = savedPos8;
            }
          } else {
            var result95 = null;
            pos = savedPos8;
          }
        } else {
          var result95 = null;
          pos = savedPos8;
        }
        var result94 = result95 !== null
          ? (function(lvalue, exp) { return new Assign(lvalue, exp); })(result95[1], result95[5])
          : null;
        if (result94 !== null) {
          var result0 = result94;
        } else {
          var savedPos7 = pos;
          var result83 = parse_ws(context);
          if (result83 !== null) {
            if (input.substr(pos, 2) === "if") {
              var result84 = "if";
              pos += 2;
            } else {
              var result84 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("if"));
              }
            }
            if (result84 !== null) {
              var result85 = parse_ws(context);
              if (result85 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result86 = "(";
                  pos += 1;
                } else {
                  var result86 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("("));
                  }
                }
                if (result86 !== null) {
                  var result87 = parse_ws(context);
                  if (result87 !== null) {
                    var result88 = parse_logical(context);
                    if (result88 !== null) {
                      var result89 = parse_ws(context);
                      if (result89 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result90 = ")";
                          pos += 1;
                        } else {
                          var result90 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString(")"));
                          }
                        }
                        if (result90 !== null) {
                          var result91 = parse_statement(context);
                          if (result91 !== null) {
                            if (input.substr(pos, 4) === "else") {
                              var result92 = "else";
                              pos += 4;
                            } else {
                              var result92 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("else"));
                              }
                            }
                            if (result92 !== null) {
                              var result93 = parse_statement(context);
                              if (result93 !== null) {
                                var result82 = [result83, result84, result85, result86, result87, result88, result89, result90, result91, result92, result93];
                              } else {
                                var result82 = null;
                                pos = savedPos7;
                              }
                            } else {
                              var result82 = null;
                              pos = savedPos7;
                            }
                          } else {
                            var result82 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result82 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result82 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result82 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result82 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result82 = null;
                  pos = savedPos7;
                }
              } else {
                var result82 = null;
                pos = savedPos7;
              }
            } else {
              var result82 = null;
              pos = savedPos7;
            }
          } else {
            var result82 = null;
            pos = savedPos7;
          }
          var result81 = result82 !== null
            ? (function(cond, t, f) { return new If(cond, t, f); })(result82[5], result82[8], result82[10])
            : null;
          if (result81 !== null) {
            var result0 = result81;
          } else {
            var savedPos6 = pos;
            var result72 = parse_ws(context);
            if (result72 !== null) {
              if (input.substr(pos, 2) === "if") {
                var result73 = "if";
                pos += 2;
              } else {
                var result73 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("if"));
                }
              }
              if (result73 !== null) {
                var result74 = parse_ws(context);
                if (result74 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result75 = "(";
                    pos += 1;
                  } else {
                    var result75 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("("));
                    }
                  }
                  if (result75 !== null) {
                    var result76 = parse_ws(context);
                    if (result76 !== null) {
                      var result77 = parse_logical(context);
                      if (result77 !== null) {
                        var result78 = parse_ws(context);
                        if (result78 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result79 = ")";
                            pos += 1;
                          } else {
                            var result79 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(")"));
                            }
                          }
                          if (result79 !== null) {
                            var result80 = parse_statement(context);
                            if (result80 !== null) {
                              var result71 = [result72, result73, result74, result75, result76, result77, result78, result79, result80];
                            } else {
                              var result71 = null;
                              pos = savedPos6;
                            }
                          } else {
                            var result71 = null;
                            pos = savedPos6;
                          }
                        } else {
                          var result71 = null;
                          pos = savedPos6;
                        }
                      } else {
                        var result71 = null;
                        pos = savedPos6;
                      }
                    } else {
                      var result71 = null;
                      pos = savedPos6;
                    }
                  } else {
                    var result71 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result71 = null;
                  pos = savedPos6;
                }
              } else {
                var result71 = null;
                pos = savedPos6;
              }
            } else {
              var result71 = null;
              pos = savedPos6;
            }
            var result70 = result71 !== null
              ? (function(cond, t) { return new If(cond, t, new NullStatement()); })(result71[5], result71[8])
              : null;
            if (result70 !== null) {
              var result0 = result70;
            } else {
              var savedPos5 = pos;
              var result61 = parse_ws(context);
              if (result61 !== null) {
                if (input.substr(pos, 5) === "while") {
                  var result62 = "while";
                  pos += 5;
                } else {
                  var result62 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("while"));
                  }
                }
                if (result62 !== null) {
                  var result63 = parse_ws(context);
                  if (result63 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result64 = "(";
                      pos += 1;
                    } else {
                      var result64 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("("));
                      }
                    }
                    if (result64 !== null) {
                      var result65 = parse_ws(context);
                      if (result65 !== null) {
                        var result66 = parse_logical(context);
                        if (result66 !== null) {
                          var result67 = parse_ws(context);
                          if (result67 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result68 = ")";
                              pos += 1;
                            } else {
                              var result68 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString(")"));
                              }
                            }
                            if (result68 !== null) {
                              var result69 = parse_statement(context);
                              if (result69 !== null) {
                                var result60 = [result61, result62, result63, result64, result65, result66, result67, result68, result69];
                              } else {
                                var result60 = null;
                                pos = savedPos5;
                              }
                            } else {
                              var result60 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result60 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result60 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result60 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result60 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result60 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result60 = null;
                  pos = savedPos5;
                }
              } else {
                var result60 = null;
                pos = savedPos5;
              }
              var result59 = result60 !== null
                ? (function(cond, body) { return new While(cond, body); })(result60[5], result60[8])
                : null;
              if (result59 !== null) {
                var result0 = result59;
              } else {
                var savedPos4 = pos;
                var result52 = parse_ws(context);
                if (result52 !== null) {
                  if (input.substr(pos, 6) === "return") {
                    var result53 = "return";
                    pos += 6;
                  } else {
                    var result53 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("return"));
                    }
                  }
                  if (result53 !== null) {
                    var result54 = parse_ws(context);
                    if (result54 !== null) {
                      var result55 = parse_logical(context);
                      if (result55 !== null) {
                        var result56 = parse_ws(context);
                        if (result56 !== null) {
                          if (input.substr(pos, 1) === ";") {
                            var result57 = ";";
                            pos += 1;
                          } else {
                            var result57 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(";"));
                            }
                          }
                          if (result57 !== null) {
                            var result58 = parse_ws(context);
                            if (result58 !== null) {
                              var result51 = [result52, result53, result54, result55, result56, result57, result58];
                            } else {
                              var result51 = null;
                              pos = savedPos4;
                            }
                          } else {
                            var result51 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result51 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result51 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result51 = null;
                      pos = savedPos4;
                    }
                  } else {
                    var result51 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result51 = null;
                  pos = savedPos4;
                }
                var result50 = result51 !== null
                  ? (function(exp) { return new Return(exp); })(result51[3])
                  : null;
                if (result50 !== null) {
                  var result0 = result50;
                } else {
                  var savedPos3 = pos;
                  var result36 = parse_ws(context);
                  if (result36 !== null) {
                    if (input.substr(pos, 8) === "function") {
                      var result37 = "function";
                      pos += 8;
                    } else {
                      var result37 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("function"));
                      }
                    }
                    if (result37 !== null) {
                      var result38 = parse_ws(context);
                      if (result38 !== null) {
                        var result39 = parse_identifier(context);
                        if (result39 !== null) {
                          var result40 = parse_ws(context);
                          if (result40 !== null) {
                            if (input.substr(pos, 1) === "(") {
                              var result41 = "(";
                              pos += 1;
                            } else {
                              var result41 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("("));
                              }
                            }
                            if (result41 !== null) {
                              var result42 = parse_ws(context);
                              if (result42 !== null) {
                                if (input.substr(pos, 1) === ")") {
                                  var result43 = ")";
                                  pos += 1;
                                } else {
                                  var result43 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString(")"));
                                  }
                                }
                                if (result43 !== null) {
                                  var result44 = parse_ws(context);
                                  if (result44 !== null) {
                                    if (input.substr(pos, 1) === "{") {
                                      var result45 = "{";
                                      pos += 1;
                                    } else {
                                      var result45 = null;
                                      if (context.reportMatchFailures) {
                                        matchFailed(quoteString("{"));
                                      }
                                    }
                                    if (result45 !== null) {
                                      var result46 = parse_ws(context);
                                      if (result46 !== null) {
                                        var result47 = parse_statements(context);
                                        if (result47 !== null) {
                                          var result48 = parse_ws(context);
                                          if (result48 !== null) {
                                            if (input.substr(pos, 1) === "}") {
                                              var result49 = "}";
                                              pos += 1;
                                            } else {
                                              var result49 = null;
                                              if (context.reportMatchFailures) {
                                                matchFailed(quoteString("}"));
                                              }
                                            }
                                            if (result49 !== null) {
                                              var result35 = [result36, result37, result38, result39, result40, result41, result42, result43, result44, result45, result46, result47, result48, result49];
                                            } else {
                                              var result35 = null;
                                              pos = savedPos3;
                                            }
                                          } else {
                                            var result35 = null;
                                            pos = savedPos3;
                                          }
                                        } else {
                                          var result35 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result35 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result35 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result35 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result35 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result35 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result35 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result35 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result35 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result35 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result35 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result35 = null;
                    pos = savedPos3;
                  }
                  var result34 = result35 !== null
                    ? (function(funcname, body) { return new FuncDecl(funcname, [], body); })(result35[3], result35[11])
                    : null;
                  if (result34 !== null) {
                    var result0 = result34;
                  } else {
                    var savedPos2 = pos;
                    var result18 = parse_ws(context);
                    if (result18 !== null) {
                      if (input.substr(pos, 8) === "function") {
                        var result19 = "function";
                        pos += 8;
                      } else {
                        var result19 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("function"));
                        }
                      }
                      if (result19 !== null) {
                        var result20 = parse_ws(context);
                        if (result20 !== null) {
                          var result21 = parse_identifier(context);
                          if (result21 !== null) {
                            var result22 = parse_ws(context);
                            if (result22 !== null) {
                              if (input.substr(pos, 1) === "(") {
                                var result23 = "(";
                                pos += 1;
                              } else {
                                var result23 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("("));
                                }
                              }
                              if (result23 !== null) {
                                var result24 = parse_ws(context);
                                if (result24 !== null) {
                                  var result25 = parse_paramList(context);
                                  if (result25 !== null) {
                                    var result26 = parse_ws(context);
                                    if (result26 !== null) {
                                      if (input.substr(pos, 1) === ")") {
                                        var result27 = ")";
                                        pos += 1;
                                      } else {
                                        var result27 = null;
                                        if (context.reportMatchFailures) {
                                          matchFailed(quoteString(")"));
                                        }
                                      }
                                      if (result27 !== null) {
                                        var result28 = parse_ws(context);
                                        if (result28 !== null) {
                                          if (input.substr(pos, 1) === "{") {
                                            var result29 = "{";
                                            pos += 1;
                                          } else {
                                            var result29 = null;
                                            if (context.reportMatchFailures) {
                                              matchFailed(quoteString("{"));
                                            }
                                          }
                                          if (result29 !== null) {
                                            var result30 = parse_ws(context);
                                            if (result30 !== null) {
                                              var result31 = parse_statements(context);
                                              if (result31 !== null) {
                                                var result32 = parse_ws(context);
                                                if (result32 !== null) {
                                                  if (input.substr(pos, 1) === "}") {
                                                    var result33 = "}";
                                                    pos += 1;
                                                  } else {
                                                    var result33 = null;
                                                    if (context.reportMatchFailures) {
                                                      matchFailed(quoteString("}"));
                                                    }
                                                  }
                                                  if (result33 !== null) {
                                                    var result17 = [result18, result19, result20, result21, result22, result23, result24, result25, result26, result27, result28, result29, result30, result31, result32, result33];
                                                  } else {
                                                    var result17 = null;
                                                    pos = savedPos2;
                                                  }
                                                } else {
                                                  var result17 = null;
                                                  pos = savedPos2;
                                                }
                                              } else {
                                                var result17 = null;
                                                pos = savedPos2;
                                              }
                                            } else {
                                              var result17 = null;
                                              pos = savedPos2;
                                            }
                                          } else {
                                            var result17 = null;
                                            pos = savedPos2;
                                          }
                                        } else {
                                          var result17 = null;
                                          pos = savedPos2;
                                        }
                                      } else {
                                        var result17 = null;
                                        pos = savedPos2;
                                      }
                                    } else {
                                      var result17 = null;
                                      pos = savedPos2;
                                    }
                                  } else {
                                    var result17 = null;
                                    pos = savedPos2;
                                  }
                                } else {
                                  var result17 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result17 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result17 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result17 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result17 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result17 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos2;
                    }
                    var result16 = result17 !== null
                      ? (function(funcname, params, body) { return new FuncDecl(funcname, params, body); })(result17[3], result17[7], result17[13])
                      : null;
                    if (result16 !== null) {
                      var result0 = result16;
                    } else {
                      var savedPos1 = pos;
                      var result10 = parse_ws(context);
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === "{") {
                          var result11 = "{";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("{"));
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_ws(context);
                          if (result12 !== null) {
                            var result13 = parse_statements(context);
                            if (result13 !== null) {
                              var result14 = parse_ws(context);
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === "}") {
                                  var result15 = "}";
                                  pos += 1;
                                } else {
                                  var result15 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("}"));
                                  }
                                }
                                if (result15 !== null) {
                                  var result9 = [result10, result11, result12, result13, result14, result15];
                                } else {
                                  var result9 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result9 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result9 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                      var result8 = result9 !== null
                        ? (function(body) { return body; })(result9[3])
                        : null;
                      if (result8 !== null) {
                        var result0 = result8;
                      } else {
                        var savedPos0 = pos;
                        var result3 = parse_ws(context);
                        if (result3 !== null) {
                          var result4 = parse_logical(context);
                          if (result4 !== null) {
                            var result5 = parse_ws(context);
                            if (result5 !== null) {
                              if (input.substr(pos, 1) === ";") {
                                var result6 = ";";
                                pos += 1;
                              } else {
                                var result6 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString(";"));
                                }
                              }
                              if (result6 !== null) {
                                var result7 = parse_ws(context);
                                if (result7 !== null) {
                                  var result2 = [result3, result4, result5, result6, result7];
                                } else {
                                  var result2 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos0;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                        var result1 = result2 !== null
                          ? (function(exp) { return exp; })(result2[1])
                          : null;
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_paramList(context) {
        var cacheKey = "paramList" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_identifier(context);
        if (result5 !== null) {
          var result6 = parse_ws(context);
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result7 !== null) {
              var result8 = parse_ws(context);
              if (result8 !== null) {
                var result9 = parse_paramList(context);
                if (result9 !== null) {
                  var result4 = [result5, result6, result7, result8, result9];
                } else {
                  var result4 = null;
                  pos = savedPos0;
                }
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(first, rest) { return [first].concat(rest); })(result4[0], result4[4])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_identifier(context);
          var result1 = result2 !== null
            ? (function(first) { return [first]; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statements(context) {
        var cacheKey = "statements" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_statement(context);
        if (result5 !== null) {
          var result6 = parse_statements(context);
          if (result6 !== null) {
            var result4 = [result5, result6];
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(first, rest) { return new CompoundStatement(first, rest); })(result4[0], result4[1])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_statement(context);
          var result1 = result2 !== null
            ? (function(first) { return first; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical(context) {
        var cacheKey = "logical" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result11 = parse_comparative(context);
        if (result11 !== null) {
          var result12 = parse_ws(context);
          if (result12 !== null) {
            if (input.substr(pos, 2) === "&&") {
              var result13 = "&&";
              pos += 2;
            } else {
              var result13 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("&&"));
              }
            }
            if (result13 !== null) {
              var result14 = parse_ws(context);
              if (result14 !== null) {
                var result15 = parse_comparative(context);
                if (result15 !== null) {
                  var result10 = [result11, result12, result13, result14, result15];
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(left, right) { return new And(left, right); })(result10[0], result10[4])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result4 = parse_comparative(context);
          if (result4 !== null) {
            var result5 = parse_ws(context);
            if (result5 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result6 = "||";
                pos += 2;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("||"));
                }
              }
              if (result6 !== null) {
                var result7 = parse_ws(context);
                if (result7 !== null) {
                  var result8 = parse_comparative(context);
                  if (result8 !== null) {
                    var result3 = [result4, result5, result6, result7, result8];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(left, right) { return new Or(left, right); })(result3[0], result3[4])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_comparative(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comparative(context) {
        var cacheKey = "comparative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos5 = pos;
        var result39 = parse_additive(context);
        if (result39 !== null) {
          var result40 = parse_ws(context);
          if (result40 !== null) {
            if (input.substr(pos, 2) === "==") {
              var result41 = "==";
              pos += 2;
            } else {
              var result41 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("=="));
              }
            }
            if (result41 !== null) {
              var result42 = parse_ws(context);
              if (result42 !== null) {
                var result43 = parse_additive(context);
                if (result43 !== null) {
                  var result38 = [result39, result40, result41, result42, result43];
                } else {
                  var result38 = null;
                  pos = savedPos5;
                }
              } else {
                var result38 = null;
                pos = savedPos5;
              }
            } else {
              var result38 = null;
              pos = savedPos5;
            }
          } else {
            var result38 = null;
            pos = savedPos5;
          }
        } else {
          var result38 = null;
          pos = savedPos5;
        }
        var result37 = result38 !== null
          ? (function(left, right) { return new Equals(left, right); })(result38[0], result38[4])
          : null;
        if (result37 !== null) {
          var result0 = result37;
        } else {
          var savedPos4 = pos;
          var result32 = parse_additive(context);
          if (result32 !== null) {
            var result33 = parse_ws(context);
            if (result33 !== null) {
              if (input.substr(pos, 2) === "!=") {
                var result34 = "!=";
                pos += 2;
              } else {
                var result34 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("!="));
                }
              }
              if (result34 !== null) {
                var result35 = parse_ws(context);
                if (result35 !== null) {
                  var result36 = parse_additive(context);
                  if (result36 !== null) {
                    var result31 = [result32, result33, result34, result35, result36];
                  } else {
                    var result31 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result31 = null;
                  pos = savedPos4;
                }
              } else {
                var result31 = null;
                pos = savedPos4;
              }
            } else {
              var result31 = null;
              pos = savedPos4;
            }
          } else {
            var result31 = null;
            pos = savedPos4;
          }
          var result30 = result31 !== null
            ? (function(left, right) { return new NotEquals(left, right); })(result31[0], result31[4])
            : null;
          if (result30 !== null) {
            var result0 = result30;
          } else {
            var savedPos3 = pos;
            var result25 = parse_additive(context);
            if (result25 !== null) {
              var result26 = parse_ws(context);
              if (result26 !== null) {
                if (input.substr(pos, 1) === "<") {
                  var result27 = "<";
                  pos += 1;
                } else {
                  var result27 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("<"));
                  }
                }
                if (result27 !== null) {
                  var result28 = parse_ws(context);
                  if (result28 !== null) {
                    var result29 = parse_additive(context);
                    if (result29 !== null) {
                      var result24 = [result25, result26, result27, result28, result29];
                    } else {
                      var result24 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result24 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result24 = null;
                  pos = savedPos3;
                }
              } else {
                var result24 = null;
                pos = savedPos3;
              }
            } else {
              var result24 = null;
              pos = savedPos3;
            }
            var result23 = result24 !== null
              ? (function(left, right) { return new Less(left, right); })(result24[0], result24[4])
              : null;
            if (result23 !== null) {
              var result0 = result23;
            } else {
              var savedPos2 = pos;
              var result18 = parse_additive(context);
              if (result18 !== null) {
                var result19 = parse_ws(context);
                if (result19 !== null) {
                  if (input.substr(pos, 2) === "<=") {
                    var result20 = "<=";
                    pos += 2;
                  } else {
                    var result20 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("<="));
                    }
                  }
                  if (result20 !== null) {
                    var result21 = parse_ws(context);
                    if (result21 !== null) {
                      var result22 = parse_additive(context);
                      if (result22 !== null) {
                        var result17 = [result18, result19, result20, result21, result22];
                      } else {
                        var result17 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result17 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result17 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result17 = null;
                  pos = savedPos2;
                }
              } else {
                var result17 = null;
                pos = savedPos2;
              }
              var result16 = result17 !== null
                ? (function(left, right) { return new LessEquals(left, right); })(result17[0], result17[4])
                : null;
              if (result16 !== null) {
                var result0 = result16;
              } else {
                var savedPos1 = pos;
                var result11 = parse_additive(context);
                if (result11 !== null) {
                  var result12 = parse_ws(context);
                  if (result12 !== null) {
                    if (input.substr(pos, 1) === ">") {
                      var result13 = ">";
                      pos += 1;
                    } else {
                      var result13 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(">"));
                      }
                    }
                    if (result13 !== null) {
                      var result14 = parse_ws(context);
                      if (result14 !== null) {
                        var result15 = parse_additive(context);
                        if (result15 !== null) {
                          var result10 = [result11, result12, result13, result14, result15];
                        } else {
                          var result10 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result10 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result10 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
                var result9 = result10 !== null
                  ? (function(left, right) { return new Greater(left, right); })(result10[0], result10[4])
                  : null;
                if (result9 !== null) {
                  var result0 = result9;
                } else {
                  var savedPos0 = pos;
                  var result4 = parse_additive(context);
                  if (result4 !== null) {
                    var result5 = parse_ws(context);
                    if (result5 !== null) {
                      if (input.substr(pos, 2) === ">=") {
                        var result6 = ">=";
                        pos += 2;
                      } else {
                        var result6 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString(">="));
                        }
                      }
                      if (result6 !== null) {
                        var result7 = parse_ws(context);
                        if (result7 !== null) {
                          var result8 = parse_additive(context);
                          if (result8 !== null) {
                            var result3 = [result4, result5, result6, result7, result8];
                          } else {
                            var result3 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result3 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                  var result2 = result3 !== null
                    ? (function(left, right) { return new GreaterEquals(left, right); })(result3[0], result3[4])
                    : null;
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_additive(context);
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive(context) {
        var cacheKey = "additive" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result11 = parse_multiplicative(context);
        if (result11 !== null) {
          var result12 = parse_ws(context);
          if (result12 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result13 = "+";
              pos += 1;
            } else {
              var result13 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("+"));
              }
            }
            if (result13 !== null) {
              var result14 = parse_ws(context);
              if (result14 !== null) {
                var result15 = parse_additive(context);
                if (result15 !== null) {
                  var result10 = [result11, result12, result13, result14, result15];
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
        } else {
          var result10 = null;
          pos = savedPos1;
        }
        var result9 = result10 !== null
          ? (function(left, right) { return new Plus(left, right); })(result10[0], result10[4])
          : null;
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var result4 = parse_multiplicative(context);
          if (result4 !== null) {
            var result5 = parse_ws(context);
            if (result5 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result6 = "-";
                pos += 1;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("-"));
                }
              }
              if (result6 !== null) {
                var result7 = parse_ws(context);
                if (result7 !== null) {
                  var result8 = parse_additive(context);
                  if (result8 !== null) {
                    var result3 = [result4, result5, result6, result7, result8];
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(left, right) { return new Minus(left, right); })(result3[0], result3[4])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_multiplicative(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative(context) {
        var cacheKey = "multiplicative" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result18 = parse_unary(context);
        if (result18 !== null) {
          var result19 = parse_ws(context);
          if (result19 !== null) {
            if (input.substr(pos, 1) === "*") {
              var result20 = "*";
              pos += 1;
            } else {
              var result20 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("*"));
              }
            }
            if (result20 !== null) {
              var result21 = parse_ws(context);
              if (result21 !== null) {
                var result22 = parse_multiplicative(context);
                if (result22 !== null) {
                  var result17 = [result18, result19, result20, result21, result22];
                } else {
                  var result17 = null;
                  pos = savedPos2;
                }
              } else {
                var result17 = null;
                pos = savedPos2;
              }
            } else {
              var result17 = null;
              pos = savedPos2;
            }
          } else {
            var result17 = null;
            pos = savedPos2;
          }
        } else {
          var result17 = null;
          pos = savedPos2;
        }
        var result16 = result17 !== null
          ? (function(left, right) { return new Times(left, right); })(result17[0], result17[4])
          : null;
        if (result16 !== null) {
          var result0 = result16;
        } else {
          var savedPos1 = pos;
          var result11 = parse_unary(context);
          if (result11 !== null) {
            var result12 = parse_ws(context);
            if (result12 !== null) {
              if (input.substr(pos, 1) === "/") {
                var result13 = "/";
                pos += 1;
              } else {
                var result13 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("/"));
                }
              }
              if (result13 !== null) {
                var result14 = parse_ws(context);
                if (result14 !== null) {
                  var result15 = parse_multiplicative(context);
                  if (result15 !== null) {
                    var result10 = [result11, result12, result13, result14, result15];
                  } else {
                    var result10 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos1;
                }
              } else {
                var result10 = null;
                pos = savedPos1;
              }
            } else {
              var result10 = null;
              pos = savedPos1;
            }
          } else {
            var result10 = null;
            pos = savedPos1;
          }
          var result9 = result10 !== null
            ? (function(left, right) { return new Divide(left, right); })(result10[0], result10[4])
            : null;
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var result4 = parse_unary(context);
            if (result4 !== null) {
              var result5 = parse_ws(context);
              if (result5 !== null) {
                if (input.substr(pos, 1) === "%") {
                  var result6 = "%";
                  pos += 1;
                } else {
                  var result6 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("%"));
                  }
                }
                if (result6 !== null) {
                  var result7 = parse_ws(context);
                  if (result7 !== null) {
                    var result8 = parse_multiplicative(context);
                    if (result8 !== null) {
                      var result3 = [result4, result5, result6, result7, result8];
                    } else {
                      var result3 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos0;
                }
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
            var result2 = result3 !== null
              ? (function(left, right) { return new Remainder(left, right); })(result3[0], result3[4])
              : null;
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_unary(context);
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary(context) {
        var cacheKey = "unary" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "-") {
          var result9 = "-";
          pos += 1;
        } else {
          var result9 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("-"));
          }
        }
        if (result9 !== null) {
          var result10 = parse_ws(context);
          if (result10 !== null) {
            var result11 = parse_unary(context);
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function(exp) { return new Neg(exp); })(result8[2])
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "+") {
            var result4 = "+";
            pos += 1;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("+"));
            }
          }
          if (result4 !== null) {
            var result5 = parse_ws(context);
            if (result5 !== null) {
              var result6 = parse_unary(context);
              if (result6 !== null) {
                var result3 = [result4, result5, result6];
              } else {
                var result3 = null;
                pos = savedPos0;
              }
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          var result2 = result3 !== null
            ? (function(exp) { return exp; })(result3[2])
            : null;
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_member(context);
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_member(context) {
        var cacheKey = "member" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_primary(context);
        if (result4 !== null) {
          var result5 = parse_ws(context);
          if (result5 !== null) {
            var result6 = parse_selector(context);
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(object, sel) { return new Select(object, sel); })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_primary(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_selector(context) {
        var cacheKey = "selector" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos7 = pos;
        if (input.substr(pos, 1) === "[") {
          var result50 = "[";
          pos += 1;
        } else {
          var result50 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("["));
          }
        }
        if (result50 !== null) {
          var result51 = parse_ws(context);
          if (result51 !== null) {
            var result52 = parse_additive(context);
            if (result52 !== null) {
              var result53 = parse_ws(context);
              if (result53 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result54 = "]";
                  pos += 1;
                } else {
                  var result54 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("]"));
                  }
                }
                if (result54 !== null) {
                  var result55 = parse_ws(context);
                  if (result55 !== null) {
                    var result56 = parse_selector(context);
                    if (result56 !== null) {
                      var result49 = [result50, result51, result52, result53, result54, result55, result56];
                    } else {
                      var result49 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result49 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result49 = null;
                  pos = savedPos7;
                }
              } else {
                var result49 = null;
                pos = savedPos7;
              }
            } else {
              var result49 = null;
              pos = savedPos7;
            }
          } else {
            var result49 = null;
            pos = savedPos7;
          }
        } else {
          var result49 = null;
          pos = savedPos7;
        }
        var result48 = result49 !== null
          ? (function(index, sel) { return [new ArrayIndex2(index)].concat(sel); })(result49[2], result49[6])
          : null;
        if (result48 !== null) {
          var result0 = result48;
        } else {
          var savedPos6 = pos;
          if (input.substr(pos, 1) === "[") {
            var result43 = "[";
            pos += 1;
          } else {
            var result43 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("["));
            }
          }
          if (result43 !== null) {
            var result44 = parse_ws(context);
            if (result44 !== null) {
              var result45 = parse_additive(context);
              if (result45 !== null) {
                var result46 = parse_ws(context);
                if (result46 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result47 = "]";
                    pos += 1;
                  } else {
                    var result47 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("]"));
                    }
                  }
                  if (result47 !== null) {
                    var result42 = [result43, result44, result45, result46, result47];
                  } else {
                    var result42 = null;
                    pos = savedPos6;
                  }
                } else {
                  var result42 = null;
                  pos = savedPos6;
                }
              } else {
                var result42 = null;
                pos = savedPos6;
              }
            } else {
              var result42 = null;
              pos = savedPos6;
            }
          } else {
            var result42 = null;
            pos = savedPos6;
          }
          var result41 = result42 !== null
            ? (function(index) { return [new ArrayIndex2(index)]; })(result42[2])
            : null;
          if (result41 !== null) {
            var result0 = result41;
          } else {
            var savedPos5 = pos;
            if (input.substr(pos, 1) === ".") {
              var result36 = ".";
              pos += 1;
            } else {
              var result36 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result36 !== null) {
              var result37 = parse_ws(context);
              if (result37 !== null) {
                var result38 = parse_identifier(context);
                if (result38 !== null) {
                  var result39 = parse_ws(context);
                  if (result39 !== null) {
                    var result40 = parse_selector(context);
                    if (result40 !== null) {
                      var result35 = [result36, result37, result38, result39, result40];
                    } else {
                      var result35 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result35 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result35 = null;
                  pos = savedPos5;
                }
              } else {
                var result35 = null;
                pos = savedPos5;
              }
            } else {
              var result35 = null;
              pos = savedPos5;
            }
            var result34 = result35 !== null
              ? (function(field, sel) { return [new ObjectField2(field)].concat(sel); })(result35[2], result35[4])
              : null;
            if (result34 !== null) {
              var result0 = result34;
            } else {
              var savedPos4 = pos;
              if (input.substr(pos, 1) === ".") {
                var result31 = ".";
                pos += 1;
              } else {
                var result31 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("."));
                }
              }
              if (result31 !== null) {
                var result32 = parse_ws(context);
                if (result32 !== null) {
                  var result33 = parse_identifier(context);
                  if (result33 !== null) {
                    var result30 = [result31, result32, result33];
                  } else {
                    var result30 = null;
                    pos = savedPos4;
                  }
                } else {
                  var result30 = null;
                  pos = savedPos4;
                }
              } else {
                var result30 = null;
                pos = savedPos4;
              }
              var result29 = result30 !== null
                ? (function(field) { return [new ObjectField2(field)]; })(result30[2])
                : null;
              if (result29 !== null) {
                var result0 = result29;
              } else {
                var savedPos3 = pos;
                if (input.substr(pos, 1) === "(") {
                  var result22 = "(";
                  pos += 1;
                } else {
                  var result22 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("("));
                  }
                }
                if (result22 !== null) {
                  var result23 = parse_ws(context);
                  if (result23 !== null) {
                    var result24 = parse_arglist(context);
                    if (result24 !== null) {
                      var result25 = parse_ws(context);
                      if (result25 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result26 = ")";
                          pos += 1;
                        } else {
                          var result26 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString(")"));
                          }
                        }
                        if (result26 !== null) {
                          var result27 = parse_ws(context);
                          if (result27 !== null) {
                            var result28 = parse_selector(context);
                            if (result28 !== null) {
                              var result21 = [result22, result23, result24, result25, result26, result27, result28];
                            } else {
                              var result21 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result21 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result21 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result21 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result21 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result21 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result21 = null;
                  pos = savedPos3;
                }
                var result20 = result21 !== null
                  ? (function(args, sel) { return [new FuncArg2(args)].concat(sel); })(result21[2], result21[6])
                  : null;
                if (result20 !== null) {
                  var result0 = result20;
                } else {
                  var savedPos2 = pos;
                  if (input.substr(pos, 1) === "(") {
                    var result15 = "(";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("("));
                    }
                  }
                  if (result15 !== null) {
                    var result16 = parse_ws(context);
                    if (result16 !== null) {
                      var result17 = parse_arglist(context);
                      if (result17 !== null) {
                        var result18 = parse_ws(context);
                        if (result18 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result19 = ")";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(")"));
                            }
                          }
                          if (result19 !== null) {
                            var result14 = [result15, result16, result17, result18, result19];
                          } else {
                            var result14 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result14 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos2;
                  }
                  var result13 = result14 !== null
                    ? (function(args) { return [new FuncArg2(args)]; })(result14[2])
                    : null;
                  if (result13 !== null) {
                    var result0 = result13;
                  } else {
                    var savedPos1 = pos;
                    if (input.substr(pos, 1) === "(") {
                      var result8 = "(";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("("));
                      }
                    }
                    if (result8 !== null) {
                      var result9 = parse_ws(context);
                      if (result9 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result10 = ")";
                          pos += 1;
                        } else {
                          var result10 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString(")"));
                          }
                        }
                        if (result10 !== null) {
                          var result11 = parse_ws(context);
                          if (result11 !== null) {
                            var result12 = parse_selector(context);
                            if (result12 !== null) {
                              var result7 = [result8, result9, result10, result11, result12];
                            } else {
                              var result7 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result7 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result7 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result7 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result7 = null;
                      pos = savedPos1;
                    }
                    var result6 = result7 !== null
                      ? (function(sel) { return [new FuncArg2([])].concat(sel); })(result7[4])
                      : null;
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      var savedPos0 = pos;
                      if (input.substr(pos, 1) === "(") {
                        var result3 = "(";
                        pos += 1;
                      } else {
                        var result3 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("("));
                        }
                      }
                      if (result3 !== null) {
                        var result4 = parse_ws(context);
                        if (result4 !== null) {
                          if (input.substr(pos, 1) === ")") {
                            var result5 = ")";
                            pos += 1;
                          } else {
                            var result5 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString(")"));
                            }
                          }
                          if (result5 !== null) {
                            var result2 = [result3, result4, result5];
                          } else {
                            var result2 = null;
                            pos = savedPos0;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos0;
                      }
                      var result1 = result2 !== null
                        ? (function() { return [new FuncArg2([])]; })()
                        : null;
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arglist(context) {
        var cacheKey = "arglist" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_logical(context);
        if (result5 !== null) {
          var result6 = parse_ws(context);
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result7 !== null) {
              var result8 = parse_ws(context);
              if (result8 !== null) {
                var result9 = parse_arglist(context);
                if (result9 !== null) {
                  var result4 = [result5, result6, result7, result8, result9];
                } else {
                  var result4 = null;
                  pos = savedPos0;
                }
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(first, rest) { return [first].concat(rest); })(result4[0], result4[4])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_logical(context);
          var result1 = result2 !== null
            ? (function(first) { return [first]; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary(context) {
        var cacheKey = "primary" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result41 = parse_number(context);
        if (result41 !== null) {
          var result0 = result41;
        } else {
          var result40 = parse_string(context);
          if (result40 !== null) {
            var result0 = result40;
          } else {
            if (input.substr(pos, 4) === "true") {
              var result39 = "true";
              pos += 4;
            } else {
              var result39 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("true"));
              }
            }
            var result38 = result39 !== null
              ? (function() { return new True(); })()
              : null;
            if (result38 !== null) {
              var result0 = result38;
            } else {
              if (input.substr(pos, 5) === "false") {
                var result37 = "false";
                pos += 5;
              } else {
                var result37 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("false"));
                }
              }
              var result36 = result37 !== null
                ? (function() { return new False(); })()
                : null;
              if (result36 !== null) {
                var result0 = result36;
              } else {
                if (input.substr(pos, 4) === "null") {
                  var result35 = "null";
                  pos += 4;
                } else {
                  var result35 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("null"));
                  }
                }
                var result34 = result35 !== null
                  ? (function() { return new Null(); })()
                  : null;
                if (result34 !== null) {
                  var result0 = result34;
                } else {
                  var result33 = parse_identifier(context);
                  var result32 = result33 !== null
                    ? (function(variable) { return new Variable(variable); })(result33)
                    : null;
                  if (result32 !== null) {
                    var result0 = result32;
                  } else {
                    var savedPos4 = pos;
                    if (input.substr(pos, 1) === "(") {
                      var result27 = "(";
                      pos += 1;
                    } else {
                      var result27 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("("));
                      }
                    }
                    if (result27 !== null) {
                      var result28 = parse_ws(context);
                      if (result28 !== null) {
                        var result29 = parse_logical(context);
                        if (result29 !== null) {
                          var result30 = parse_ws(context);
                          if (result30 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result31 = ")";
                              pos += 1;
                            } else {
                              var result31 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString(")"));
                              }
                            }
                            if (result31 !== null) {
                              var result26 = [result27, result28, result29, result30, result31];
                            } else {
                              var result26 = null;
                              pos = savedPos4;
                            }
                          } else {
                            var result26 = null;
                            pos = savedPos4;
                          }
                        } else {
                          var result26 = null;
                          pos = savedPos4;
                        }
                      } else {
                        var result26 = null;
                        pos = savedPos4;
                      }
                    } else {
                      var result26 = null;
                      pos = savedPos4;
                    }
                    var result25 = result26 !== null
                      ? (function(exp) { return exp; })(result26[2])
                      : null;
                    if (result25 !== null) {
                      var result0 = result25;
                    } else {
                      var savedPos3 = pos;
                      if (input.substr(pos, 1) === "[") {
                        var result22 = "[";
                        pos += 1;
                      } else {
                        var result22 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("["));
                        }
                      }
                      if (result22 !== null) {
                        var result23 = parse_ws(context);
                        if (result23 !== null) {
                          if (input.substr(pos, 1) === "]") {
                            var result24 = "]";
                            pos += 1;
                          } else {
                            var result24 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("]"));
                            }
                          }
                          if (result24 !== null) {
                            var result21 = [result22, result23, result24];
                          } else {
                            var result21 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result21 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result21 = null;
                        pos = savedPos3;
                      }
                      var result20 = result21 !== null
                        ? (function() { return new ArrayType([]); })()
                        : null;
                      if (result20 !== null) {
                        var result0 = result20;
                      } else {
                        var savedPos2 = pos;
                        if (input.substr(pos, 1) === "[") {
                          var result15 = "[";
                          pos += 1;
                        } else {
                          var result15 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("["));
                          }
                        }
                        if (result15 !== null) {
                          var result16 = parse_ws(context);
                          if (result16 !== null) {
                            var result17 = parse_arrayInit(context);
                            if (result17 !== null) {
                              var result18 = parse_ws(context);
                              if (result18 !== null) {
                                if (input.substr(pos, 1) === "]") {
                                  var result19 = "]";
                                  pos += 1;
                                } else {
                                  var result19 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("]"));
                                  }
                                }
                                if (result19 !== null) {
                                  var result14 = [result15, result16, result17, result18, result19];
                                } else {
                                  var result14 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result14 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result14 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result14 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos2;
                        }
                        var result13 = result14 !== null
                          ? (function(init) { return new ArrayType(init); })(result14[2])
                          : null;
                        if (result13 !== null) {
                          var result0 = result13;
                        } else {
                          var savedPos1 = pos;
                          if (input.substr(pos, 1) === "{") {
                            var result10 = "{";
                            pos += 1;
                          } else {
                            var result10 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("{"));
                            }
                          }
                          if (result10 !== null) {
                            var result11 = parse_ws(context);
                            if (result11 !== null) {
                              if (input.substr(pos, 1) === "}") {
                                var result12 = "}";
                                pos += 1;
                              } else {
                                var result12 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("}"));
                                }
                              }
                              if (result12 !== null) {
                                var result9 = [result10, result11, result12];
                              } else {
                                var result9 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result9 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result9 = null;
                            pos = savedPos1;
                          }
                          var result8 = result9 !== null
                            ? (function() { return new ObjectType({}); })()
                            : null;
                          if (result8 !== null) {
                            var result0 = result8;
                          } else {
                            var savedPos0 = pos;
                            if (input.substr(pos, 1) === "{") {
                              var result3 = "{";
                              pos += 1;
                            } else {
                              var result3 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("{"));
                              }
                            }
                            if (result3 !== null) {
                              var result4 = parse_ws(context);
                              if (result4 !== null) {
                                var result5 = parse_objectInit(context);
                                if (result5 !== null) {
                                  var result6 = parse_ws(context);
                                  if (result6 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result7 = "}";
                                      pos += 1;
                                    } else {
                                      var result7 = null;
                                      if (context.reportMatchFailures) {
                                        matchFailed(quoteString("}"));
                                      }
                                    }
                                    if (result7 !== null) {
                                      var result2 = [result3, result4, result5, result6, result7];
                                    } else {
                                      var result2 = null;
                                      pos = savedPos0;
                                    }
                                  } else {
                                    var result2 = null;
                                    pos = savedPos0;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos0;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos0;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos0;
                            }
                            var result1 = result2 !== null
                              ? (function(init) { return new ObjectType(init); })(result2[2])
                              : null;
                            if (result1 !== null) {
                              var result0 = result1;
                            } else {
                              var result0 = null;;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arrayInit(context) {
        var cacheKey = "arrayInit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result5 = parse_logical(context);
        if (result5 !== null) {
          var result6 = parse_ws(context);
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(","));
              }
            }
            if (result7 !== null) {
              var result8 = parse_ws(context);
              if (result8 !== null) {
                var result9 = parse_arrayInit(context);
                if (result9 !== null) {
                  var result4 = [result5, result6, result7, result8, result9];
                } else {
                  var result4 = null;
                  pos = savedPos0;
                }
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
        } else {
          var result4 = null;
          pos = savedPos0;
        }
        var result3 = result4 !== null
          ? (function(first, rest) { return [first].concat(rest) })(result4[0], result4[4])
          : null;
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_logical(context);
          var result1 = result2 !== null
            ? (function(first) { return [first]; })(result2)
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_objectInit(context) {
        var cacheKey = "objectInit" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_identifier(context);
        if (result10 !== null) {
          var result11 = parse_ws(context);
          if (result11 !== null) {
            if (input.substr(pos, 1) === ":") {
              var result12 = ":";
              pos += 1;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(":"));
              }
            }
            if (result12 !== null) {
              var result13 = parse_ws(context);
              if (result13 !== null) {
                var result14 = parse_logical(context);
                if (result14 !== null) {
                  var result15 = parse_ws(context);
                  if (result15 !== null) {
                    if (input.substr(pos, 1) === ",") {
                      var result16 = ",";
                      pos += 1;
                    } else {
                      var result16 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString(","));
                      }
                    }
                    if (result16 !== null) {
                      var result17 = parse_ws(context);
                      if (result17 !== null) {
                        var result18 = parse_objectInit(context);
                        if (result18 !== null) {
                          var result9 = [result10, result11, result12, result13, result14, result15, result16, result17, result18];
                        } else {
                          var result9 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result9 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(field, value, rest) { rest[field] = value; return rest; })(result9[0], result9[4], result9[8])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result3 = parse_identifier(context);
          if (result3 !== null) {
            var result4 = parse_ws(context);
            if (result4 !== null) {
              if (input.substr(pos, 1) === ":") {
                var result5 = ":";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString(":"));
                }
              }
              if (result5 !== null) {
                var result6 = parse_ws(context);
                if (result6 !== null) {
                  var result7 = parse_logical(context);
                  if (result7 !== null) {
                    var result2 = [result3, result4, result5, result6, result7];
                  } else {
                    var result2 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(field, value) { o = new Object(); o[field] = value; return o;})(result2[0], result2[4])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier(context) {
        var cacheKey = "identifier" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result4 !== null) {
            result3.push(result4);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result4 = input.charAt(pos);
              pos++;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(chars) { return chars[0] + chars[1].join(''); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_number(context) {
        var cacheKey = "number" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result25 = input.charAt(pos);
          pos++;
        } else {
          var result25 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result25 !== null) {
          var result19 = [];
          while (result25 !== null) {
            result19.push(result25);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result25 = input.charAt(pos);
              pos++;
            } else {
              var result25 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result19 = null;
        }
        if (result19 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result20 = ".";
            pos += 1;
          } else {
            var result20 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("."));
            }
          }
          if (result20 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result24 = input.charAt(pos);
              pos++;
            } else {
              var result24 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result24 !== null) {
              var result21 = [];
              while (result24 !== null) {
                result21.push(result24);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result24 = input.charAt(pos);
                  pos++;
                } else {
                  var result24 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result21 = null;
            }
            if (result21 !== null) {
              var result22 = parse_ws(context);
              if (result22 !== null) {
                var result23 = parse_identifier(context);
                if (result23 !== null) {
                  var result18 = [result19, result20, result21, result22, result23];
                } else {
                  var result18 = null;
                  pos = savedPos2;
                }
              } else {
                var result18 = null;
                pos = savedPos2;
              }
            } else {
              var result18 = null;
              pos = savedPos2;
            }
          } else {
            var result18 = null;
            pos = savedPos2;
          }
        } else {
          var result18 = null;
          pos = savedPos2;
        }
        var result17 = result18 !== null
          ? (function(whole, fraction) { return new Const(parseFloat(whole.join('') + '.' + fraction.join(''), 10)); })(result18[0], result18[2])
          : null;
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos).match(/^[0-9]/) !== null) {
            var result16 = input.charAt(pos);
            pos++;
          } else {
            var result16 = null;
            if (context.reportMatchFailures) {
              matchFailed("[0-9]");
            }
          }
          if (result16 !== null) {
            var result12 = [];
            while (result16 !== null) {
              result12.push(result16);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result16 = input.charAt(pos);
                pos++;
              } else {
                var result16 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            var result12 = null;
          }
          if (result12 !== null) {
            if (input.substr(pos, 1) === ".") {
              var result13 = ".";
              pos += 1;
            } else {
              var result13 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("."));
              }
            }
            if (result13 !== null) {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result15 = input.charAt(pos);
                pos++;
              } else {
                var result15 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result15 !== null) {
                var result14 = [];
                while (result15 !== null) {
                  result14.push(result15);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result15 = input.charAt(pos);
                    pos++;
                  } else {
                    var result15 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                var result14 = null;
              }
              if (result14 !== null) {
                var result11 = [result12, result13, result14];
              } else {
                var result11 = null;
                pos = savedPos1;
              }
            } else {
              var result11 = null;
              pos = savedPos1;
            }
          } else {
            var result11 = null;
            pos = savedPos1;
          }
          var result10 = result11 !== null
            ? (function(whole, fraction) { return new Const(parseFloat(whole.join('') + '.' + fraction.join(''), 10)); })(result11[0], result11[2])
            : null;
          if (result10 !== null) {
            var result0 = result10;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result9 = input.charAt(pos);
              pos++;
            } else {
              var result9 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result9 !== null) {
              var result6 = [];
              while (result9 !== null) {
                result6.push(result9);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result9 = input.charAt(pos);
                  pos++;
                } else {
                  var result9 = null;
                  if (context.reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result6 = null;
            }
            if (result6 !== null) {
              var result7 = parse_ws(context);
              if (result7 !== null) {
                var result8 = parse_identifier(context);
                if (result8 !== null) {
                  var result5 = [result6, result7, result8];
                } else {
                  var result5 = null;
                  pos = savedPos0;
                }
              } else {
                var result5 = null;
                pos = savedPos0;
              }
            } else {
              var result5 = null;
              pos = savedPos0;
            }
            var result4 = result5 !== null
              ? (function(digits) { return new Const(parseInt(digits.join(''), 10)); })(result5[0])
              : null;
            if (result4 !== null) {
              var result0 = result4;
            } else {
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result3 = input.charAt(pos);
                pos++;
              } else {
                var result3 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
              if (result3 !== null) {
                var result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result3 = input.charAt(pos);
                    pos++;
                  } else {
                    var result3 = null;
                    if (context.reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                }
              } else {
                var result2 = null;
              }
              var result1 = result2 !== null
                ? (function(digits) { return new Const(parseInt(digits.join(''), 10)); })(result2)
                : null;
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_string(context) {
        var cacheKey = "string" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result9 = "\"";
          pos += 1;
        } else {
          var result9 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("\""));
          }
        }
        if (result9 !== null) {
          var result10 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result12 = input.charAt(pos);
            pos++;
          } else {
            var result12 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result12 !== null) {
            result10.push(result12);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result12 = input.charAt(pos);
              pos++;
            } else {
              var result12 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result10 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result11 = "\"";
              pos += 1;
            } else {
              var result11 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("\""));
              }
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos1;
            }
          } else {
            var result8 = null;
            pos = savedPos1;
          }
        } else {
          var result8 = null;
          pos = savedPos1;
        }
        var result7 = result8 !== null
          ? (function(chars) { return new StringValue(chars.join('')); })(result8[1])
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 1) === "'") {
            var result3 = "'";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("'"));
            }
          }
          if (result3 !== null) {
            var result4 = [];
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
            while (result6 !== null) {
              result4.push(result6);
              if (input.substr(pos).match(/^[^"]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^\"]");
                }
              }
            }
            if (result4 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result5 = "'";
                pos += 1;
              } else {
                var result5 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("'"));
                }
              }
              if (result5 !== null) {
                var result2 = [result3, result4, result5];
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          var result1 = result2 !== null
            ? (function(chars) { return new StringValue(chars.join('')); })(result2[1])
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ws(context) {
        var cacheKey = "ws" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
            var result1 = input.charAt(pos);
            pos++;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed("[ 	\\n\\r]");
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_statement({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
